### 1. Что такое цикл событий (event loop) и как он работает?
   
   Цикл событий (event loop) - это механизм, используемый в JavaScript и других языках программирования для обработки событий и выполнения асинхронного кода. 
   Он позволяет программе эффективно обрабатывать события, такие как пользовательские действия, таймеры, сетевые запросы и другие асинхронные операции.
   Работа цикла событий в JavaScript обычно выглядит следующим образом:

    Ожидание событий: 
    Цикл событий начинает свою работу, ожидая возникновения событий. Это могут быть пользовательские действия (например, щелчки мыши или нажатия клавиш), таймеры, сетевые запросы или другие асинхронные операции.
    Обработка событий: 
    Когда событие происходит, оно помещается в очередь событий (event queue). Цикл событий извлекает событие из очереди и передает его на обработку.
    Выполнение обработчиков событий: 
    Цикл событий вызывает соответствующий обработчик события, который содержит код, который должен быть выполнен в ответ на событие. Обработчик выполняется синхронно, то есть блокирует выполнение других событий до завершения.
    Обработка асинхронного кода: 
    Если в обработчике события есть асинхронный код, такой как таймеры или сетевые запросы, он не блокирует выполнение других событий. Вместо этого асинхронный код помещается в очередь задач (task queue) для выполнения в будущем.
    Возврат к ожиданию событий:
    После выполнения всех обработчиков событий и обработки асинхронного кода, цикл событий возвращается к ожиданию новых событий. Процесс повторяется, пока не будет завершена работа программы.
    
    Цикл событий позволяет JavaScript выполнять асинхронный код без блокировки основного потока выполнения. 
    Это позволяет создавать отзывчивые веб-приложения, которые могут обрабатывать пользовательские действия и одновременно выполнять другие задачи, такие как загрузка данных или анимации.

### 2. Какие типы данных есть в JS?
    Всего в JS 8 типов данных:

    Число (number)
    Строка (string)
    Булевый (логический) тип (boolean)
    BigInt
    Symbol
    null
    undefiend
    Object

### 3. Что такое NaN? Какого типа это значение? Как можно узнать, равно ли значение переменной NaN?

    NaN расшифровывается как "Not A Number", это "false" (ложное) значение. 
    Будьте аккуратны, выражение typeof NaN возвращает тип Number.
    Чтобы проверить значение переменной на соответствие NaN можно, воспользовавшись встроенным методом isNaN() или используя оператор тройного равенства ===.

    let x = NaN;
    console.log(isNaN(x)); // true

    let y = 5 / "hello";
    console.log(Number.isNaN(y)); // true

    let z = 10;
    console.log(isNaN(z)); // false

### 4. В чем разница между let, const и var?
   
   Начнем с var:

   Переменные, объявленные с помощью var, имеют функциональную область видимости или область видимости внутри целого файла.
   Переменные var могут быть переопределены и переобъявлены в той же области видимости.
   Переменные var поднимаются (hoisted) в начало своей области видимости, что означает, что их можно использовать до их фактического объявления.

   Пример:
   console.log(x); // undefined
   var x = 5;
   console.log(x); // 5
   
   let:

   Переменные, объявленные с помощью let, имеют блочную область видимости, ограниченную фигурными скобками {}.
   Переменные let не могут быть переобъявлены в той же области видимости, но могут быть переопределены.
   Переменные let не поднимаются (не hoisted) и не могут быть использованы до их объявления.

   Пример:
   console.log(x); // ReferenceError: x is not defined
   let x = 5;
   console.log(x); // 5

   const:

   Переменные, объявленные с помощью const, также имеют блочную область видимости.
   Переменные const должны быть инициализированы при объявлении и их значение не может быть изменено после этого.
   Переменные const не могут быть переобъявлены или переопределены.
   const также создает неизменяемую ссылку на объект, поэтому значения внутри объекта могут быть изменены, но сама ссылка остается неизменной.

   Примеры:
   const x = 5;
   console.log(x); // 5
   x = 10; // TypeError: Assignment to constant variable.
   const a = [];
   a.push(1); // Так можно

  const b = {};
  b['a'] = 1; // Так тоже можно


### 5. Что такое this? Отличие this в function declaration и стрелочных функциях

 this - это специальное ключевое слово в JavaScript, которое ссылается на объект, в контексте которого выполняется текущий код. 
Значение this зависит от контекста вызова функции и может быть разным в различных ситуациях.
Функции (function declaration):
В функциях объявления значение this определяется во время выполнения функции, в зависимости от способа вызова функции.
Если функция вызывается как метод объекта, то this ссылается на сам объект, на котором вызывается метод.
Если функция вызывается как обычная функция, то this ссылается на глобальный объект (в браузере это объект window).

Пример:

function sayHello() {
  console.log(this.name);
}

const person = {
  name: 'John',
  sayHello: sayHello
};

person.sayHello(); // Выводит 'John'

const greet = person.sayHello;
greet(); // Выводит undefined (или ошибку, если 'use strict' включен)
Стрелочные функции (arrow functions):

В стрелочных функциях значение this определяется лексически, оно берется из окружающего контекста, в котором функция была определена.
Стрелочные функции не имеют своего собственного this, поэтому они не создают новый контекст this и не зависят от способа вызова.
Вместо этого, this в стрелочных функциях ссылается на this окружающего контекста.

Пример:
const person = {
  name: 'John',
  sayHello: function() {
    const greet = () => {
      console.log(this.name);
    };
    greet();
  }
};

person.sayHello(); // Выводит 'John'





























